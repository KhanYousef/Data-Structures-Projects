//Yousef Khan

package assignment5;
import java.io.*;
public class TreeNavigator { // creates the tree object itself
	private TreeNode root; //A reference to the root TreeNode of this tree.
	private TreeNode cursor; //A reference to the currently selected TreeNode in the tree.
	
	/*Reads in a text file describing a TreeNavigator. See sample input for an example.
	Preconditions: treeFile is a non-null, non-empty String that points to a file that exists that is readable and valid.
	Returns a new TreeNavigator generated by the passed in text file.
	 */
	public static TreeNavigator buildTree(String treeFile){
		File f = new File(treeFile);
		String line = "";
		TreeNavigator tempNav = new TreeNavigator();
		try{
			BufferedReader br = new BufferedReader(new FileReader(f));
			line = br.readLine();
			
			while(line != null){
				String[] lineStore = line.split(";");
				
				String[] numStore = lineStore[0].split("-");
				String[] keywordStore = lineStore[1].split(",");
				
				if(numStore.length == 1){
					TreeNode tempNode = new TreeNode();
					tempNode.setKeywords(keywordStore);
					tempNav.setRoot(tempNode);
				}
				else{
					tempNav.resetCursor();
				}
					for(int i = 1; i < numStore.length; i++){
					
					
						if(i == numStore.length - 1){
							if(numStore[i].equals("0")){
								TreeNode tempNode = new TreeNode();
								tempNode.setKeywords(keywordStore);
								tempNav.cursor.setLeft(tempNode);
								tempNode.setKeywords(keywordStore);
								tempNav.resetCursor();
							}
							else if(numStore[i].equals("1")){
								TreeNode tempNode = new TreeNode();
								tempNode.setKeywords(keywordStore);
								tempNav.cursor.setRight(tempNode);
								tempNode.setKeywords(keywordStore);
								tempNav.resetCursor();
							}
						}
					
					
					if(numStore[i].equals("0")){
						tempNav.cursor = tempNav.cursor.getLeft();
					}
					
					if(numStore[i].equals("1")){
						tempNav.cursor = tempNav.cursor.getRight();
					}
					
				}
				
				line = br.readLine();
				
			}

			
			System.out.println("Tree Loaded.");
			
		} catch (FileNotFoundException e) {
			System.out.println("File was not found");
		} catch (IOException e) {
			System.out.println("An IO Exception was thrown");
		}
		
		
		return tempNav;
		
	}
	/*
	 Classifies the text with the given tree and returns the classification as a String.
	 */
	public String classify(String text){
		cursor = root;
		String classifiedText = "";
		String[] textStore = text.split(" ");
		for(int i = 0; i < cursor.getKeywords().length; i++){
			for(int j = 0; j < textStore.length; j++){
				if(textStore[j].equalsIgnoreCase(cursor.getKeywords()[i])){
					cursor = cursor.getRight();
					i = 0;
					if(cursor.isLeaf()){
						classifiedText = cursor.getKeywords()[0];
					}
				}
				else if(i == cursor.getKeywords().length -1 && j == textStore.length - 1){
					cursor = cursor.getLeft();
					i = 0;
					if(cursor.isLeaf()){
						classifiedText = cursor.getKeywords()[0];
					}
				}
			}
		}
		return classifiedText;
		
	}
	/*
	 Gets the current path of the cursor. For example, if cursor referred to a TreeNode at position
	 */
	public String getPath(){
		return null;
		
	}
	/*
	 Resets the cursor to the root node.
	Postconditions: Cursor references root node. Cursor contents are printed.
	 */
	public void resetCursor(){
		cursor = root;
	}
	/*
	 Moves cursor to its left child.
	Postconditions: Cursor contents are printed.
	 */
	public void cursorLeft(){
		cursor = cursor.getLeft();
	}
	/*
	 Moves cursor to its right child.
	Postconditions: Cursor contents are printed.
	 */
	public void cursorRight(){
		cursor = cursor.getRight();
	}
	
	/*
	 This gets the Cursor so you can modify the keywords or the Left or the Right child links.
	Precondition: Cursor is not null (return null if it is null)
	Postcondition: Cursor is returned to the caller.
	 */
	public TreeNode getCursor(){
		if(cursor == null){
			return null;
		}
		else{
			return cursor;
		}
	}
	/*
	 Sets the keywords for the current cursor.
	 */
	public void editCursor(String text){
		cursor.setKeywords(text.split(","));
	}
	/*
	 Sets the root to a specific node
	 */
	public void setRoot(TreeNode root){
		this.root = root;
	}

}
